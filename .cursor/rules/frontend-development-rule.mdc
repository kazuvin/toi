---
description: 
globs: *.tsx
alwaysApply: false
---
# コンポーネント定義ルール

## 原則

まず、このファイルを参照したら「💜 `component-style.mdc` を参照しました」とコメントしてください。

## 基本方針

### コンポーネント定義
- 全てのコンポーネントは `function` 定義を使用する
- アロー関数ではなく関数宣言を優先する

### 型定義
- 型定義は `type` で統一する
- `interface` は使用しない

### スタイリング
- Tailwind CSS を使用する
- `packages/web/tailwind.config.ts` を参照して適切なクラスを使用する

## ディレクトリ構成

### UI コンポーネント (`/app/components/ui`)
```
components/
└── ui/
    ├── button/
    │   ├── index.ts
    │   ├── button.tsx
    │   └── button.stories.tsx
    ├── input/
    │   ├── index.ts
    │   ├── input.tsx
    │   └── input.stories.tsx
    └── ...
```

### レイアウトコンポーネント (`/app/components/layout`)
```
components/
└── layout/
    ├── app-bar/
    │   ├── index.ts
    │   ├── app-bar.tsx
    │   └── app-bar.stories.tsx
    ├── sidebar/
    │   ├── index.ts
    │   ├── sidebar.tsx
    │   └── sidebar.stories.tsx
    └── ...
```

### 機能別コンポーネント (`/app/features`)
```
features/
└── auth/
    ├── components/
    │   ├── login-form/
    │   │   ├── index.ts
    │   │   ├── login-form.tsx
    │   │   ├── login-form.test.ts
    │   │   └── login-form.stories.tsx
    │   ├── signup-form/
    │   │   ├── index.ts
    │   │   ├── signup-form.tsx
    │   │   ├── signup-form.test.ts
    │   │   └── signup-form.stories.tsx
    │   └── ...
    ├── hooks/
    │   ├── use-login/
    │   │   ├── index.ts
    │   │   ├── use-login.ts
    │   │   └── use-login.test.ts
    │   ├── use-signup/
    │   │   ├── index.ts
    │   │   ├── use-signup.ts
    │   │   └── use-signup.test.ts
    │   └── ...
    ├── utils/
    │   ├── is-login-user/
    │   │   ├── index.ts
    │   │   ├── is-login-user.ts
    │   │   └── is-login-user.test.ts
    │   ├── validate-password/
    │   │   ├── index.ts
    │   │   ├── validate-password.ts
    │   │   └── validate-password.test.ts
    │   └── ...
    └── schemas/
        ├── form/
        │   ├── index.ts
        │   ├── form.ts
        │   └── form.test.ts
        ├── api/
        │   ├── index.ts
        │   ├── api.ts
        │   └── api.test.ts
        └── ...
```

### API サービス (`/app/services`)
```
services/
├── auth/
│   ├── index.ts
│   └── schemas.ts
├── user/
│   ├── index.ts
│   └── schemas.ts
├── posts/
│   ├── index.ts
│   └── schemas.ts
└── base.ts
```

base.ts に api 呼び出し用の関数を定義してあるので、各 API リクエスト関数は base から import して利用すること。

## ファイル命名規則

### エクスポート用 index ファイル
- 各ディレクトリに `index.ts` を配置し、外部からのインポートを統一する

### テストファイル
- テスト対象ファイル名に `.test.ts` または `.test.tsx` を付与する

### Storybook ファイル
- コンポーネントファイル名に `.stories.tsx` を付与する

### API スキーマファイル
- API リクエスト/レスポンスの型定義は `schemas.ts` に配置する

## 共通ルール

### 型定義の場所
- コンポーネント固有の型：同一ファイル内で定義
- 共通型：適切な `schemas` ディレクトリに配置
- API 関連型：`services` の `schemas.ts` に配置

### テストカバレッジ
- 全ての関数、フック、ユーティリティにテストを作成する
- コンポーネントは必要に応じてテストを作成する